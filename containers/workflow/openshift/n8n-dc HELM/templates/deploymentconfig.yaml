apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/part-of: {{ .Values.name }}-app
    role: db
    template: {{ .Values.name }}-dc-template
  name: redis-{{ .Values.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    name: redis-{{ .Values.name }}
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: redis-{{ .Values.name }}
    spec:
      containers:
      - env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: redis-{{ .Values.name }}
        image: image-registry.openshift-image-registry.svc:5000/openshift/redis:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 6379
          timeoutSeconds: 1
        name: redis-{{ .Values.name }}
        ports:
        - containerPort: 6379
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 512Mi
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/redis/data
          name: redis-{{ .Values.name }}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: redis-{{ .Values.name }}-data
        persistentVolumeClaim:
          claimName: redis-{{ .Values.name }}
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - redis-{{ .Values.name }}
      from:
        kind: ImageStreamTag
        name: redis:latest
        namespace: openshift
    type: ImageChange
  - type: ConfigChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/part-of: {{ .Values.name }}-app
    role: db
    template: {{ .Values.name }}-dc-template
  name: postgresql-{{ .Values.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    name: postgresql-{{ .Values.name }}
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: postgresql-{{ .Values.name }}
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: postgresql-{{ .Values.name }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: postgresql-{{ .Values.name }}
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: postgresql-{{ .Values.name }}
        image: image-registry.openshift-image-registry.svc:5000/openshift/postgresql:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: postgresql-{{ .Values.name }}
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 512Mi
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgresql-{{ .Values.name }}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: postgresql-{{ .Values.name }}-data
        persistentVolumeClaim:
          claimName: postgresql-{{ .Values.name }}
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql-{{ .Values.name }}
      from:
        kind: ImageStreamTag
        name: postgresql:latest
        namespace: openshift
    type: ImageChange
  - type: ConfigChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/part-of: {{ .Values.name }}-app
    role: api
    template: {{ .Values.name }}-dc-template
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    name: {{ .Values.name }}
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: {{ .Values.name }}
    spec:
      containers:
      - command:
        - n8n
        env:
        - name: DB_TYPE
          value: postgresdb
        - name: DB_POSTGRESDB_HOST
          value: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_SCHEMA
          value: public
        - name: N8N_BASIC_AUTH_ACTIVE
          value: "true"
        - name: N8N_BASIC_AUTH_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.name }}
        - name: N8N_BASIC_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.name }}
        - name: N8N_PORT
          value: "5678"
        - name: N8N_EMAIL_MODE
          value: smtp
        - name: N8N_SMTP_HOST
          value: apps.smtp.gov.bc.ca
        - name: N8N_SMTP_PORT
          value: "25"
        - name: N8N_SMTP_USER
          value: no-reply@gov.bc.ca
        - name: N8N_SMTP_PASS
          value: null
        - name: N8N_SMTP_SENDER
          value: no-reply@gov.bc.ca
        - name: N8N_SMTP_SSL
          value: "false"
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              key: encryption-key
              name: {{ .Values.name }}
        - name: N8N_DEFAULT_BINARY_DATA_MODE
          value: filesystem
        - name: N8N_METRICS
          value: "true"
        - name: QUEUE_BULL_REDIS_HOST
          value: redis-{{ .Values.name }}
        - name: QUEUE_BULL_REDIS_PORT
          value: "6379"
        - name: QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD
          value: "20"
        - name: QUEUE_RECOVERY_INTERVAL
          value: "10"
        - name: QUEUE_BULL_REDIS_DB
          value: "0"
        - name: QUEUE_BULL_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: redis-{{ .Values.name }}
        - name: GENERIC_TIMEZONE
          value: America/Vancouver
        - name: EXECUTIONS_PROCESS
          value: own
        - name: EXECUTIONS_MODE
          value: queue
        - name: WEBHOOK_TUNNEL_URL
          value: https://{{ .Values.name }}-{{ .Values.namespace }}.apps.{{ .Values.cluster_name }}.devops.gov.bc.ca/
        - name: WEBHOOK_URL
          value: https://{{ .Values.name }}-{{ .Values.namespace }}.apps.{{ .Values.cluster_name }}.devops.gov.bc.ca
        - name: NODE_ENV
          value: production
        - name: N8N_DISABLE_PRODUCTION_MAIN_PROCESS
          value: "true"
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.n8n_image_namespace }}/{{ .Values.name }}:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 5678
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: n8n
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 5678
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: {{ .Values.cpu_limit }}
            memory: {{ .Values.memory_limit }}
          requests:
            cpu: {{ .Values.cpu_request }}
            memory: {{ .Values.memory_request }}
        startupProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 5678
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: {{ .Values.name }}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: {{ .Values.name }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.name }}-data
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - {{ .Values.name }}
      from:
        kind: ImageStreamTag
        name: {{ .Values.name }}:latest
        namespace: {{ .Values.n8n_image_namespace }}
    type: ImageChange
  - type: ConfigChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/part-of: {{ .Values.name }}-app
    role: api
    template: {{ .Values.name }}-dc-template
  name: {{ .Values.name }}-worker
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    name: {{ .Values.name }}-worker
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: {{ .Values.name }}-worker
    spec:
      containers:
      - args:
        - worker
        command:
        - n8n
        env:
        - name: DB_TYPE
          value: postgresdb
        - name: DB_POSTGRESDB_HOST
          value: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_SCHEMA
          value: public
        - name: N8N_BASIC_AUTH_ACTIVE
          value: "true"
        - name: N8N_BASIC_AUTH_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.name }}
        - name: N8N_BASIC_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.name }}
        - name: N8N_PORT
          value: "5678"
        - name: N8N_EMAIL_MODE
          value: smtp
        - name: N8N_SMTP_HOST
          value: apps.smtp.gov.bc.ca
        - name: N8N_SMTP_PORT
          value: "25"
        - name: N8N_SMTP_USER
          value: no-reply@gov.bc.ca
        - name: N8N_SMTP_PASS
          value: null
        - name: N8N_SMTP_SENDER
          value: no-reply@gov.bc.ca
        - name: N8N_SMTP_SSL
          value: "false"
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              key: encryption-key
              name: {{ .Values.name }}
        - name: N8N_DEFAULT_BINARY_DATA_MODE
          value: filesystem
        - name: N8N_METRICS
          value: "true"
        - name: QUEUE_BULL_REDIS_HOST
          value: redis-{{ .Values.name }}
        - name: QUEUE_BULL_REDIS_PORT
          value: "6379"
        - name: QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD
          value: "20"
        - name: QUEUE_RECOVERY_INTERVAL
          value: "10"
        - name: QUEUE_BULL_REDIS_DB
          value: "0"
        - name: QUEUE_BULL_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: redis-{{ .Values.name }}
        - name: GENERIC_TIMEZONE
          value: America/Vancouver
        - name: EXECUTIONS_PROCESS
          value: own
        - name: EXECUTIONS_MODE
          value: queue
        - name: NODE_ENV
          value: production
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.n8n_image_namespace }}/{{ .Values.name }}:latest
        imagePullPolicy: IfNotPresent
        name: n8n-worker
        resources:
          limits:
            cpu: {{ .Values.cpu_limit }}
            memory: {{ .Values.memory_limit }}
          requests:
            cpu: {{ .Values.cpu_request }}
            memory: {{ .Values.memory_request }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: {{ .Values.name }}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: {{ .Values.name }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.name }}-data
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - {{ .Values.name }}-worker
      from:
        kind: ImageStreamTag
        name: {{ .Values.name }}:latest
        namespace: {{ .Values.n8n_image_namespace }}
    type: ImageChange
  - type: ConfigChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: {{ .Values.name }}
    app.kubernetes.io/part-of: {{ .Values.name }}-app
    role: api
    template: {{ .Values.name }}-dc-template
  name: {{ .Values.name }}-webhook
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    name: {{ .Values.name }}-webhook
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: {{ .Values.name }}-webhook
    spec:
      containers:
      - args:
        - webhook
        command:
        - n8n
        env:
        - name: DB_TYPE
          value: postgresdb
        - name: DB_POSTGRESDB_HOST
          value: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: postgresql-{{ .Values.name }}
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_SCHEMA
          value: public
        - name: N8N_BASIC_AUTH_ACTIVE
          value: "true"
        - name: N8N_BASIC_AUTH_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.name }}
        - name: N8N_BASIC_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.name }}
        - name: N8N_PORT
          value: "5678"
        - name: N8N_EMAIL_MODE
          value: smtp
        - name: N8N_SMTP_HOST
          value: apps.smtp.gov.bc.ca
        - name: N8N_SMTP_PORT
          value: "25"
        - name: N8N_SMTP_USER
          value: no-reply@gov.bc.ca
        - name: N8N_SMTP_PASS
          value: null
        - name: N8N_SMTP_SENDER
          value: no-reply@gov.bc.ca
        - name: N8N_SMTP_SSL
          value: "false"
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              key: encryption-key
              name: {{ .Values.name }}
        - name: N8N_DEFAULT_BINARY_DATA_MODE
          value: filesystem
        - name: N8N_METRICS
          value: "true"
        - name: QUEUE_BULL_REDIS_HOST
          value: redis-{{ .Values.name }}
        - name: QUEUE_BULL_REDIS_PORT
          value: "6379"
        - name: QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD
          value: "20"
        - name: QUEUE_RECOVERY_INTERVAL
          value: "10"
        - name: QUEUE_BULL_REDIS_DB
          value: "0"
        - name: QUEUE_BULL_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: redis-{{ .Values.name }}
        - name: GENERIC_TIMEZONE
          value: America/Vancouver
        - name: EXECUTIONS_PROCESS
          value: own
        - name: EXECUTIONS_MODE
          value: queue
        - name: NODE_ENV
          value: production
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.n8n_image_namespace }}/{{ .Values.name }}:latest
        imagePullPolicy: IfNotPresent
        name: n8n-webhook
        resources:
          limits:
            cpu: {{ .Values.cpu_limit }}
            memory: {{ .Values.memory_limit }}
          requests:
            cpu: {{ .Values.cpu_request }}
            memory: {{ .Values.memory_request }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: {{ .Values.name }}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: {{ .Values.name }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.name }}-data
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - {{ .Values.name }}-webhook
      from:
        kind: ImageStreamTag
        name: {{ .Values.name }}:latest
        namespace: {{ .Values.n8n_image_namespace }}
    type: ImageChange
  - type: ConfigChange
